Assignment name : get_next_line
Expected files : get_next_line.c (42_EXAM can't take .h for now)
Allowed functions: read, free, malloc
--------------------------------------------------------------------------------

Écrivez une fonction nommée get_next_line dont le prototype devrait être :
char *get_next_line(int fd);


Votre fonction doit renvoyer une ligne qui a été lue à partir du descripteur de
fichier passé en paramètre. Ce que nous appelons une "ligne lue" est une
succession de 0 à n caractères qui se termine par '\n' (code ASCII 0x0a) ou par
la fin de fichier (EOF).

La ligne doit être renvoyée en incluant le '\n' s'il y en a un à la fin de la
ligne lue. Lorsque vous atteignez la fin de fichier, vous devez stocker le
tampon actuel dans un char * et le retourner. Si le tampon est vide, vous devez
retourner NULL.

En cas d'erreur, retournez NULL. En cas de non retour NULL, le pointeur doit
être libérable. Votre programme sera compilé avec le drapeau -D BUFFER_SIZE=xx,
qui doit être utilisé comme taille du tampon pour les appels à read dans vos
fonctions.

Votre fonction doit être exempte de fuites de mémoire. Lorsque vous avez atteint
la fin de fichier, votre fonction ne doit garder 0 mémoire allouée avec malloc,
 l'exception de la ligne qui a été retournée.

Appeler votre fonction get_next_line() dans une boucle permet donc de lire le
texte disponible sur un descripteur de fichier une ligne à la fois jusqu'à la
fin du texte, quelle que soit la taille du texte ou de l'une de ses lignes.

Assurez-vous que votre fonction se comporte bien lorsqu'elle lit à partir d'un
fichier, de la sortie standard, d'une redirection, etc.

Aucun appel à une autre fonction ne sera effectué sur le descripteur de fichier
entre 2 appels de get_next_line(). Enfin, nous considérons que get_next_line()
a un comportement indéfini lorsqu'elle lit à partir d'un fichier binaire.