Assignment name  : cpp_module00
Expected files   : Warlock.cpp Warlock.hpp
--------------------------------------------------------------------------------

Créez une classe Warlock. Elle doit être conforme à la forme de Coplien.

Elle aura les attributs privés suivants :

name (string)
title (string)
Puisqu'ils sont privés, vous écrirez les getters suivants :

getName, renvoie une référence à une chaîne de caractères constante
getTitle, renvoie une référence à une chaîne de caractères constante
Ces deux fonctions devront pouvoir être appelées sur un Warlock constant.

Créez le setter suivant :

setTitle, renvoie void et prend une référence à une chaîne de caractères
constante
Votre Warlock aura également, en plus de ce qui est requis par la forme de
Coplien, un constructeur qui prend, dans cet ordre, son nom et son titre.
Votre Warlock ne pourra pas être copié, instancié par copie, ou instancié
sans nom et sans titre.


Par exemple :

Warlock bob;                            //Does not compile
Warlock bob("Bob", "the magnificent");  //Compiles
Warlock jim("Jim", "the nauseating");   //Compiles
bob = jim;                              //Does not compile
Warlock jack(jim);                      //Does not compile


Lors de sa création, le Warlock dit :

<NAME>: This looks like another boring day.


Bien sûr, chaque fois que nous utilisons des espaces réservés comme
<NAME>, <TITLE>, etc. dans les sorties, vous les remplacerez par la valeur
appropriée. Sans les < et >.

Lorsqu'il meurt, il dit :

<NAME>: My job here is done!

Notre Warlock doit également être capable de se présenter, en se vantant de
toutes ses forces.

Vous allez donc écrire la fonction suivante :
* void introduce() const;

Il doit afficher :

<NAME>: I am <NAME>, <TITLE>!


Voici un exemple de fonction main de test et sa sortie associée :

int main()
{
  Warlock const richard("Richard", "Mistress of Magma");
  richard.introduce();
  std::cout << richard.getName() << " - " << richard.getTitle() << std::endl;

  Warlock* jack = new Warlock("Jack", "the Long");
  jack->introduce();
  jack->setTitle("the Mighty");
  jack->introduce();

  delete jack;

  return (0);
}

~$ ./a.out | cat -e
Richard: This looks like another boring day.$
Richard: I am Richard, Mistress of Magma!$
Richard - Mistress of Magma$
Jack: This looks like another boring day.$
Jack: I am Jack, the Long!$
Jack: I am Jack, the Mighty!$
Jack: My job here is done!$
Richard: My job here is done!$
~$
