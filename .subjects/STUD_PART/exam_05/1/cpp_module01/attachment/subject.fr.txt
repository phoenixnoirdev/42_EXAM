Assignment name  : cpp_module01
Expected files   : Warlock.cpp Warlock.hpp
                   ASpell.hpp ASpell.cpp
				   ATarget.hpp ATarget.cpp
				   Fwoosh.hpp Fwoosh.cpp
				   Dummy.hpp Dummy.cpp
--------------------------------------------------------------------------------

Dans la classe Warlock, l'instruction switch est INTERDITE et son utilisation 
entraînerait un retour de -42.

Créez une classe abstraite appelée ASpell, conforme à la forme de Coplien,
qui possède les attributs protégés suivants :

name (string)
effects (string)
Tous deux auront des getters (getName et getEffects) qui renvoient des chaînes
de caractères.

Ajoutez également une méthode virtuelle pure clone qui renvoie un pointeur
vers ASpell.

Toutes ces fonctions peuvent être appelées sur un objet constant.

ASpell a un constructeur qui prend son nom et ses effets, dans cet ordre.

Maintenant, vous allez créer une classe abstraite ATarget, conforme à la forme
de Coplien. Elle a un attribut de type, qui est une chaîne de caractères, et
son getter associé, getType, qui renvoie une référence à une chaîne de
caractères constante.

De la même manière que ASpell, elle a une méthode virtuelle pure clone().

Toutes ces fonctions peuvent être appelées sur un objet constant.

Elle a un constructeur qui prend son type.

Maintenant, ajoutez à votre ATarget une fonction getHitBySpell qui prend une
référence à un ASpell constant.

Elle affichera :

<TYPE> has been <EFFECTS>!

<TYPE> is the ATarget's type, and <EFFECTS> is the return of the ASpell's
getEffects function.

Enfin, ajoutez à votre classe ASpell une fonction launch qui prend une référence
à un ATarget constant.

Celle-ci appellera simplement la fonction getHitBySpell de l'objet passé, en
passant l'instance actuelle en tant que paramètre.

Lorsque tout cela est fait, créez une implémentation de ASpell appelée Fwoosh.
Son constructeur par défaut définira le nom sur "Fwoosh" et les effets sur
"fwooshed". Vous devez bien sûr implémenter la méthode clone(). Dans le cas de
Fwoosh, elle renverra un pointeur vers un nouvel objet Fwoosh.

De la même manière, créez un ATarget concret appelé Dummy, dont le type est
"Target Practice Dummy". Vous devez également implémenter sa méthode clone().

Ajoutez au Warlock les fonctions membres suivantes :

	- learnSpell, prend un pointeur vers ASpell, ce qui permet au Warlock 
	d'apprendre un sort
	- forgetSpell, prend une chaîne correspondant au nom d'un sort, et fait 
	oublier au Warlock ce sort. S'il ne s'agit pas d'un sort connu, ne fait
	rien.
	- launchSpell, prend une chaîne (un nom de sort) et une référence à 
	ATarget, qui lance le sort sur la cible sélectionnée. S'il ne s'agit pas
	d'un sort connu, ne fait rien.

Vous aurez besoin d'un nouvel attribut pour stocker les sorts que votre Warlock connaît. Plusieurs types conviennent, à vous de choisir le meilleur.

Ci-dessous se trouve un exemple possible de fonction main de test et sa sortie attendue :

int main()
{
  Warlock richard("Richard", "the Titled");

  Dummy bob;
  Fwoosh* fwoosh = new Fwoosh();

  richard.learnSpell(fwoosh);

  richard.introduce();
  richard.launchSpell("Fwoosh", bob);

  richard.forgetSpell("Fwoosh");
  richard.launchSpell("Fwoosh", bob);
}

~$ ./a.out | cat -e
Richard: This looks like another boring day.$
Richard: I am Richard, the Titled!$
Target Practice Dummy has been fwooshed!$
Richard: My job here is done!$
